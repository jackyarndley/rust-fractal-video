<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="710" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="693.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="693.00"> </text><svg id="frames" x="10" width="1180"><g><title>miniz_oxide::inflate::core::apply_match (1 samples, 0.14%)</title><rect x="0.0000%" y="517" width="0.1399%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="527.50"></text></g><g><title>miniz_oxide::inflate::core::decompress_fast (2 samples, 0.28%)</title><rect x="0.0000%" y="533" width="0.2797%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="543.50"></text></g><g><title>miniz_oxide::inflate::core::fill_bit_buffer (1 samples, 0.14%)</title><rect x="0.1399%" y="517" width="0.1399%" height="15" fill="rgb(221,193,54)"/><text x="0.3899%" y="527.50"></text></g><g><title>miniz_oxide::inflate::core::read_u32_le (1 samples, 0.14%)</title><rect x="0.1399%" y="501" width="0.1399%" height="15" fill="rgb(248,212,6)"/><text x="0.3899%" y="511.50"></text></g><g><title>&lt;&amp;mut T as core::convert::AsRef&lt;U&gt;&gt;::as_ref (1 samples, 0.14%)</title><rect x="0.1399%" y="485" width="0.1399%" height="15" fill="rgb(208,68,35)"/><text x="0.3899%" y="495.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::convert::AsRef&lt;[T]&gt;&gt;::as_ref (1 samples, 0.14%)</title><rect x="0.1399%" y="469" width="0.1399%" height="15" fill="rgb(232,128,0)"/><text x="0.3899%" y="479.50"></text></g><g><title>core::slice::Iter&lt;T&gt;::as_slice (1 samples, 0.14%)</title><rect x="0.1399%" y="453" width="0.1399%" height="15" fill="rgb(207,160,47)"/><text x="0.3899%" y="463.50"></text></g><g><title>core::slice::Iter&lt;T&gt;::make_slice (1 samples, 0.14%)</title><rect x="0.1399%" y="437" width="0.1399%" height="15" fill="rgb(228,23,34)"/><text x="0.3899%" y="447.50"></text></g><g><title>[unknown] (3 samples, 0.42%)</title><rect x="0.0000%" y="629" width="0.4196%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="639.50"></text></g><g><title>png::decoder::stream::StreamingDecoder::update (3 samples, 0.42%)</title><rect x="0.0000%" y="613" width="0.4196%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="623.50"></text></g><g><title>png::decoder::stream::StreamingDecoder::next_state (3 samples, 0.42%)</title><rect x="0.0000%" y="597" width="0.4196%" height="15" fill="rgb(250,228,42)"/><text x="0.2500%" y="607.50"></text></g><g><title>png::decoder::zlib::ZlibStream::decompress (3 samples, 0.42%)</title><rect x="0.0000%" y="581" width="0.4196%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="591.50"></text></g><g><title>miniz_oxide::inflate::core::decompress (3 samples, 0.42%)</title><rect x="0.0000%" y="565" width="0.4196%" height="15" fill="rgb(216,20,37)"/><text x="0.2500%" y="575.50"></text></g><g><title>miniz_oxide::inflate::core::decompress_inner (3 samples, 0.42%)</title><rect x="0.0000%" y="549" width="0.4196%" height="15" fill="rgb(206,188,39)"/><text x="0.2500%" y="559.50"></text></g><g><title>miniz_oxide::shared::update_adler32 (1 samples, 0.14%)</title><rect x="0.2797%" y="533" width="0.1399%" height="15" fill="rgb(217,207,13)"/><text x="0.5297%" y="543.50"></text></g><g><title>adler32::RollingAdler32::update_buffer (1 samples, 0.14%)</title><rect x="0.2797%" y="517" width="0.1399%" height="15" fill="rgb(231,73,38)"/><text x="0.5297%" y="527.50"></text></g><g><title>adler32::do16 (1 samples, 0.14%)</title><rect x="0.2797%" y="501" width="0.1399%" height="15" fill="rgb(225,20,46)"/><text x="0.5297%" y="511.50"></text></g><g><title>adler32::do8 (1 samples, 0.14%)</title><rect x="0.2797%" y="485" width="0.1399%" height="15" fill="rgb(210,31,41)"/><text x="0.5297%" y="495.50"></text></g><g><title>adler32::do4 (1 samples, 0.14%)</title><rect x="0.2797%" y="469" width="0.1399%" height="15" fill="rgb(221,200,47)"/><text x="0.5297%" y="479.50"></text></g><g><title>adler32::do2 (1 samples, 0.14%)</title><rect x="0.2797%" y="453" width="0.1399%" height="15" fill="rgb(226,26,5)"/><text x="0.5297%" y="463.50"></text></g><g><title>adler32::do1 (1 samples, 0.14%)</title><rect x="0.2797%" y="437" width="0.1399%" height="15" fill="rgb(249,33,26)"/><text x="0.5297%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 1.40%)</title><rect x="9.5105%" y="197" width="1.3986%" height="15" fill="rgb(235,183,28)"/><text x="9.7605%" y="207.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 1.40%)</title><rect x="9.5105%" y="181" width="1.3986%" height="15" fill="rgb(221,5,38)"/><text x="9.7605%" y="191.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&lt;&amp;f32&gt;&gt;::mul (5 samples, 0.70%)</title><rect x="10.9091%" y="197" width="0.6993%" height="15" fill="rgb(247,18,42)"/><text x="11.1591%" y="207.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (5 samples, 0.70%)</title><rect x="10.9091%" y="181" width="0.6993%" height="15" fill="rgb(241,131,45)"/><text x="11.1591%" y="191.50"></text></g><g><title>&lt;f32 as num_traits::cast::NumCast&gt;::from (20 samples, 2.80%)</title><rect x="11.6084%" y="197" width="2.7972%" height="15" fill="rgb(249,31,29)"/><text x="11.8584%" y="207.50">&lt;f..</text></g><g><title>&lt;u8 as num_traits::cast::ToPrimitive&gt;::to_f32 (20 samples, 2.80%)</title><rect x="11.6084%" y="181" width="2.7972%" height="15" fill="rgb(225,111,53)"/><text x="11.8584%" y="191.50">&lt;u..</text></g><g><title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.14%)</title><rect x="34.8252%" y="165" width="0.1399%" height="15" fill="rgb(238,160,17)"/><text x="35.0752%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.14%)</title><rect x="34.8252%" y="149" width="0.1399%" height="15" fill="rgb(214,148,48)"/><text x="35.0752%" y="159.50"></text></g><g><title>&lt;image::buffer_::ImageBuffer&lt;P,Container&gt; as image::image::GenericImageView&gt;::get_pixel (153 samples, 21.40%)</title><rect x="14.4056%" y="197" width="21.3986%" height="15" fill="rgb(232,36,49)"/><text x="14.6556%" y="207.50">&lt;image::buffer_::ImageBuffer&lt;P,Con..</text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::get_pixel (7 samples, 0.98%)</title><rect x="34.8252%" y="181" width="0.9790%" height="15" fill="rgb(209,103,24)"/><text x="35.0752%" y="191.50"></text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::pixel_indices (6 samples, 0.84%)</title><rect x="34.9650%" y="165" width="0.8392%" height="15" fill="rgb(229,88,8)"/><text x="35.2150%" y="175.50"></text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::pixel_indices_unchecked (1 samples, 0.14%)</title><rect x="35.6643%" y="149" width="0.1399%" height="15" fill="rgb(213,181,19)"/><text x="35.9143%" y="159.50"></text></g><g><title>&lt;image::color::Rgb&lt;T&gt; as image::traits::Pixel&gt;::from_channels (3 samples, 0.42%)</title><rect x="35.8042%" y="197" width="0.4196%" height="15" fill="rgb(254,191,54)"/><text x="36.0542%" y="207.50"></text></g><g><title>&lt;u8 as num_traits::cast::NumCast&gt;::from (16 samples, 2.24%)</title><rect x="36.2238%" y="197" width="2.2378%" height="15" fill="rgb(241,83,37)"/><text x="36.4738%" y="207.50">&lt;..</text></g><g><title>&lt;f32 as num_traits::cast::ToPrimitive&gt;::to_u8 (16 samples, 2.24%)</title><rect x="36.2238%" y="181" width="2.2378%" height="15" fill="rgb(233,36,39)"/><text x="36.4738%" y="191.50">&lt;..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (9 samples, 1.26%)</title><rect x="38.4615%" y="197" width="1.2587%" height="15" fill="rgb(226,3,54)"/><text x="38.7115%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (9 samples, 1.26%)</title><rect x="38.4615%" y="181" width="1.2587%" height="15" fill="rgb(245,192,40)"/><text x="38.7115%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (18 samples, 2.52%)</title><rect x="39.7203%" y="197" width="2.5175%" height="15" fill="rgb(238,167,29)"/><text x="39.9703%" y="207.50">co..</text></g><g><title>core::slice::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (4 samples, 0.56%)</title><rect x="47.1329%" y="165" width="0.5594%" height="15" fill="rgb(232,182,51)"/><text x="47.3829%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index_mut (4 samples, 0.56%)</title><rect x="47.1329%" y="149" width="0.5594%" height="15" fill="rgb(231,60,39)"/><text x="47.3829%" y="159.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.14%)</title><rect x="47.5524%" y="133" width="0.1399%" height="15" fill="rgb(208,69,12)"/><text x="47.8024%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.14%)</title><rect x="47.5524%" y="117" width="0.1399%" height="15" fill="rgb(235,93,37)"/><text x="47.8024%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.14%)</title><rect x="47.5524%" y="101" width="0.1399%" height="15" fill="rgb(213,116,39)"/><text x="47.8024%" y="111.50"></text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::put_pixel (49 samples, 6.85%)</title><rect x="42.2378%" y="197" width="6.8531%" height="15" fill="rgb(222,207,29)"/><text x="42.4878%" y="207.50">image::bu..</text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::get_pixel_mut (16 samples, 2.24%)</title><rect x="46.8531%" y="181" width="2.2378%" height="15" fill="rgb(206,96,30)"/><text x="47.1031%" y="191.50">i..</text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::pixel_indices (10 samples, 1.40%)</title><rect x="47.6923%" y="165" width="1.3986%" height="15" fill="rgb(218,138,4)"/><text x="47.9423%" y="175.50"></text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::pixel_indices_unchecked (7 samples, 0.98%)</title><rect x="48.1119%" y="149" width="0.9790%" height="15" fill="rgb(250,191,14)"/><text x="48.3619%" y="159.50"></text></g><g><title>image::buffer_::ImageBuffer&lt;P,alloc::vec::Vec&lt;&lt;P as image::traits::Pixel&gt;::Subpixel&gt;&gt;::new (1 samples, 0.14%)</title><rect x="49.0909%" y="197" width="0.1399%" height="15" fill="rgb(239,60,40)"/><text x="49.3409%" y="207.50"></text></g><g><title>alloc::vec::from_elem (1 samples, 0.14%)</title><rect x="49.0909%" y="181" width="0.1399%" height="15" fill="rgb(206,27,48)"/><text x="49.3409%" y="191.50"></text></g><g><title>&lt;u8 as alloc::vec::SpecFromElem&gt;::from_elem (1 samples, 0.14%)</title><rect x="49.0909%" y="165" width="0.1399%" height="15" fill="rgb(225,35,8)"/><text x="49.3409%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity_zeroed (1 samples, 0.14%)</title><rect x="49.0909%" y="149" width="0.1399%" height="15" fill="rgb(250,213,24)"/><text x="49.3409%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (1 samples, 0.14%)</title><rect x="49.0909%" y="133" width="0.1399%" height="15" fill="rgb(247,123,22)"/><text x="49.3409%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.14%)</title><rect x="49.0909%" y="117" width="0.1399%" height="15" fill="rgb(231,138,38)"/><text x="49.3409%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc_zeroed (1 samples, 0.14%)</title><rect x="49.0909%" y="101" width="0.1399%" height="15" fill="rgb(231,145,46)"/><text x="49.3409%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.14%)</title><rect x="49.0909%" y="85" width="0.1399%" height="15" fill="rgb(251,118,11)"/><text x="49.3409%" y="95.50"></text></g><g><title>alloc::alloc::alloc_zeroed (1 samples, 0.14%)</title><rect x="49.0909%" y="69" width="0.1399%" height="15" fill="rgb(217,147,25)"/><text x="49.3409%" y="79.50"></text></g><g><title>__libc_calloc (1 samples, 0.14%)</title><rect x="49.0909%" y="53" width="0.1399%" height="15" fill="rgb(247,81,37)"/><text x="49.3409%" y="63.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.14%)</title><rect x="49.0909%" y="37" width="0.1399%" height="15" fill="rgb(209,12,38)"/><text x="49.3409%" y="47.50"></text></g><g><title>image::math::utils::clamp (47 samples, 6.57%)</title><rect x="49.2308%" y="197" width="6.5734%" height="15" fill="rgb(227,1,9)"/><text x="49.4808%" y="207.50">image::ma..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::lt (3 samples, 0.42%)</title><rect x="55.3846%" y="181" width="0.4196%" height="15" fill="rgb(248,47,43)"/><text x="55.6346%" y="191.50"></text></g><g><title>image::imageops::sample::horizontal_sample (397 samples, 55.52%)</title><rect x="0.4196%" y="213" width="55.5245%" height="15" fill="rgb(221,10,30)"/><text x="0.6696%" y="223.50">image::imageops::sample::horizontal_sample</text></g><g><title>std::f32::&lt;impl f32&gt;::floor (1 samples, 0.14%)</title><rect x="55.8042%" y="197" width="0.1399%" height="15" fill="rgb(210,229,1)"/><text x="56.0542%" y="207.50"></text></g><g><title>[libm-2.31.so] (1 samples, 0.14%)</title><rect x="55.8042%" y="181" width="0.1399%" height="15" fill="rgb(222,148,37)"/><text x="56.0542%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.14%)</title><rect x="70.0699%" y="197" width="0.1399%" height="15" fill="rgb(234,67,33)"/><text x="70.3199%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.70%)</title><rect x="70.2098%" y="197" width="0.6993%" height="15" fill="rgb(247,98,35)"/><text x="70.4598%" y="207.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.70%)</title><rect x="70.2098%" y="181" width="0.6993%" height="15" fill="rgb(247,138,52)"/><text x="70.4598%" y="191.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&lt;&amp;f32&gt;&gt;::mul (8 samples, 1.12%)</title><rect x="70.9091%" y="197" width="1.1189%" height="15" fill="rgb(213,79,30)"/><text x="71.1591%" y="207.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (8 samples, 1.12%)</title><rect x="70.9091%" y="181" width="1.1189%" height="15" fill="rgb(246,177,23)"/><text x="71.1591%" y="191.50"></text></g><g><title>&lt;f32 as num_traits::cast::NumCast&gt;::from (5 samples, 0.70%)</title><rect x="72.0280%" y="197" width="0.6993%" height="15" fill="rgb(230,62,27)"/><text x="72.2780%" y="207.50"></text></g><g><title>&lt;u8 as num_traits::cast::ToPrimitive&gt;::to_f32 (5 samples, 0.70%)</title><rect x="72.0280%" y="181" width="0.6993%" height="15" fill="rgb(216,154,8)"/><text x="72.2780%" y="191.50"></text></g><g><title>&lt;image::color::Rgb&lt;T&gt; as image::traits::Pixel&gt;::from_channels (1 samples, 0.14%)</title><rect x="72.7273%" y="197" width="0.1399%" height="15" fill="rgb(244,35,45)"/><text x="72.9773%" y="207.50"></text></g><g><title>&lt;&amp;T as core::ops::deref::Deref&gt;::deref (1 samples, 0.14%)</title><rect x="74.2657%" y="181" width="0.1399%" height="15" fill="rgb(251,115,12)"/><text x="74.5157%" y="191.50"></text></g><g><title>&lt;image::image::SubImage&lt;I&gt; as image::image::GenericImageView&gt;::get_pixel (29 samples, 4.06%)</title><rect x="72.8671%" y="197" width="4.0559%" height="15" fill="rgb(240,54,50)"/><text x="73.1171%" y="207.50">&lt;ima..</text></g><g><title>&lt;image::buffer_::ImageBuffer&lt;P,Container&gt; as image::image::GenericImageView&gt;::get_pixel (18 samples, 2.52%)</title><rect x="74.4056%" y="181" width="2.5175%" height="15" fill="rgb(233,84,52)"/><text x="74.6556%" y="191.50">&lt;i..</text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::get_pixel (14 samples, 1.96%)</title><rect x="74.9650%" y="165" width="1.9580%" height="15" fill="rgb(207,117,47)"/><text x="75.2150%" y="175.50">i..</text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::pixel_indices (6 samples, 0.84%)</title><rect x="76.0839%" y="149" width="0.8392%" height="15" fill="rgb(249,43,39)"/><text x="76.3339%" y="159.50"></text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::pixel_indices_unchecked (6 samples, 0.84%)</title><rect x="76.0839%" y="133" width="0.8392%" height="15" fill="rgb(209,38,44)"/><text x="76.3339%" y="143.50"></text></g><g><title>&lt;u8 as num_traits::cast::NumCast&gt;::from (12 samples, 1.68%)</title><rect x="76.9231%" y="197" width="1.6783%" height="15" fill="rgb(236,212,23)"/><text x="77.1731%" y="207.50"></text></g><g><title>&lt;f32 as num_traits::cast::ToPrimitive&gt;::to_u8 (12 samples, 1.68%)</title><rect x="76.9231%" y="181" width="1.6783%" height="15" fill="rgb(242,79,21)"/><text x="77.1731%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (13 samples, 1.82%)</title><rect x="78.6014%" y="197" width="1.8182%" height="15" fill="rgb(211,96,35)"/><text x="78.8514%" y="207.50">c..</text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::put_pixel (31 samples, 4.34%)</title><rect x="80.4196%" y="197" width="4.3357%" height="15" fill="rgb(253,215,40)"/><text x="80.6696%" y="207.50">image..</text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::get_pixel_mut (25 samples, 3.50%)</title><rect x="81.2587%" y="181" width="3.4965%" height="15" fill="rgb(211,81,21)"/><text x="81.5087%" y="191.50">ima..</text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::pixel_indices (13 samples, 1.82%)</title><rect x="82.9371%" y="165" width="1.8182%" height="15" fill="rgb(208,190,38)"/><text x="83.1871%" y="175.50">i..</text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::pixel_indices_unchecked (13 samples, 1.82%)</title><rect x="82.9371%" y="149" width="1.8182%" height="15" fill="rgb(235,213,38)"/><text x="83.1871%" y="159.50">i..</text></g><g><title>image::buffer_::ImageBuffer&lt;P,alloc::vec::Vec&lt;&lt;P as image::traits::Pixel&gt;::Subpixel&gt;&gt;::new (1 samples, 0.14%)</title><rect x="84.7552%" y="197" width="0.1399%" height="15" fill="rgb(237,122,38)"/><text x="85.0052%" y="207.50"></text></g><g><title>alloc::vec::from_elem (1 samples, 0.14%)</title><rect x="84.7552%" y="181" width="0.1399%" height="15" fill="rgb(244,218,35)"/><text x="85.0052%" y="191.50"></text></g><g><title>&lt;u8 as alloc::vec::SpecFromElem&gt;::from_elem (1 samples, 0.14%)</title><rect x="84.7552%" y="165" width="0.1399%" height="15" fill="rgb(240,68,47)"/><text x="85.0052%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity_zeroed (1 samples, 0.14%)</title><rect x="84.7552%" y="149" width="0.1399%" height="15" fill="rgb(210,16,53)"/><text x="85.0052%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (1 samples, 0.14%)</title><rect x="84.7552%" y="133" width="0.1399%" height="15" fill="rgb(235,124,12)"/><text x="85.0052%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.14%)</title><rect x="84.7552%" y="117" width="0.1399%" height="15" fill="rgb(224,169,11)"/><text x="85.0052%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc_zeroed (1 samples, 0.14%)</title><rect x="84.7552%" y="101" width="0.1399%" height="15" fill="rgb(250,166,2)"/><text x="85.0052%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.14%)</title><rect x="84.7552%" y="85" width="0.1399%" height="15" fill="rgb(242,216,29)"/><text x="85.0052%" y="95.50"></text></g><g><title>alloc::alloc::alloc_zeroed (1 samples, 0.14%)</title><rect x="84.7552%" y="69" width="0.1399%" height="15" fill="rgb(230,116,27)"/><text x="85.0052%" y="79.50"></text></g><g><title>__libc_calloc (1 samples, 0.14%)</title><rect x="84.7552%" y="53" width="0.1399%" height="15" fill="rgb(228,99,48)"/><text x="85.0052%" y="63.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.14%)</title><rect x="84.7552%" y="37" width="0.1399%" height="15" fill="rgb(253,11,6)"/><text x="85.0052%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (653 samples, 91.33%)</title><rect x="0.4196%" y="389" width="91.3287%" height="15" fill="rgb(247,143,39)"/><text x="0.6696%" y="399.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (653 samples, 91.33%)</title><rect x="0.4196%" y="373" width="91.3287%" height="15" fill="rgb(236,97,10)"/><text x="0.6696%" y="383.50">alloc::vec::Vec&lt;T&gt;::extend_desugared</text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (653 samples, 91.33%)</title><rect x="0.4196%" y="357" width="91.3287%" height="15" fill="rgb(233,208,19)"/><text x="0.6696%" y="367.50">&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (653 samples, 91.33%)</title><rect x="0.4196%" y="341" width="91.3287%" height="15" fill="rgb(216,164,2)"/><text x="0.6696%" y="351.50">&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (653 samples, 91.33%)</title><rect x="0.4196%" y="325" width="91.3287%" height="15" fill="rgb(220,129,5)"/><text x="0.6696%" y="335.50">&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (653 samples, 91.33%)</title><rect x="0.4196%" y="309" width="91.3287%" height="15" fill="rgb(242,17,10)"/><text x="0.6696%" y="319.50">&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (653 samples, 91.33%)</title><rect x="0.4196%" y="293" width="91.3287%" height="15" fill="rgb(242,107,0)"/><text x="0.6696%" y="303.50">&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::option::Option&lt;T&gt;::map (653 samples, 91.33%)</title><rect x="0.4196%" y="277" width="91.3287%" height="15" fill="rgb(251,28,31)"/><text x="0.6696%" y="287.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (653 samples, 91.33%)</title><rect x="0.4196%" y="261" width="91.3287%" height="15" fill="rgb(233,223,10)"/><text x="0.6696%" y="271.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once</text></g><g><title>rust_fractal_video::main::{{closure}} (653 samples, 91.33%)</title><rect x="0.4196%" y="245" width="91.3287%" height="15" fill="rgb(215,21,27)"/><text x="0.6696%" y="255.50">rust_fractal_video::main::{{closure}}</text></g><g><title>image::imageops::sample::resize (653 samples, 91.33%)</title><rect x="0.4196%" y="229" width="91.3287%" height="15" fill="rgb(232,23,21)"/><text x="0.6696%" y="239.50">image::imageops::sample::resize</text></g><g><title>image::imageops::sample::vertical_sample (256 samples, 35.80%)</title><rect x="55.9441%" y="213" width="35.8042%" height="15" fill="rgb(244,5,23)"/><text x="56.1941%" y="223.50">image::imageops::sample::vertical_sample</text></g><g><title>image::math::utils::clamp (49 samples, 6.85%)</title><rect x="84.8951%" y="197" width="6.8531%" height="15" fill="rgb(226,81,46)"/><text x="85.1451%" y="207.50">image::ma..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::lt (1 samples, 0.14%)</title><rect x="91.6084%" y="181" width="0.1399%" height="15" fill="rgb(247,70,30)"/><text x="91.8584%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="91.7483%" y="229" width="0.1399%" height="15" fill="rgb(212,68,19)"/><text x="91.9983%" y="239.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="91.7483%" y="213" width="0.1399%" height="15" fill="rgb(240,187,13)"/><text x="91.9983%" y="223.50"></text></g><g><title>&lt;image::buffer_::ImageBuffer&lt;P,Container&gt; as image::image::GenericImageView&gt;::get_pixel (8 samples, 1.12%)</title><rect x="91.8881%" y="229" width="1.1189%" height="15" fill="rgb(223,113,26)"/><text x="92.1381%" y="239.50"></text></g><g><title>image::imageops::sample::horizontal_sample (10 samples, 1.40%)</title><rect x="91.7483%" y="245" width="1.3986%" height="15" fill="rgb(206,192,2)"/><text x="91.9983%" y="255.50"></text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::put_pixel (1 samples, 0.14%)</title><rect x="93.0070%" y="229" width="0.1399%" height="15" fill="rgb(241,108,4)"/><text x="93.2570%" y="239.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&lt;&amp;f32&gt;&gt;::mul (1 samples, 0.14%)</title><rect x="93.4266%" y="229" width="0.1399%" height="15" fill="rgb(247,173,49)"/><text x="93.6766%" y="239.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (1 samples, 0.14%)</title><rect x="93.4266%" y="213" width="0.1399%" height="15" fill="rgb(224,114,35)"/><text x="93.6766%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (668 samples, 93.43%)</title><rect x="0.4196%" y="437" width="93.4266%" height="15" fill="rgb(245,159,27)"/><text x="0.6696%" y="447.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (668 samples, 93.43%)</title><rect x="0.4196%" y="421" width="93.4266%" height="15" fill="rgb(245,172,44)"/><text x="0.6696%" y="431.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (668 samples, 93.43%)</title><rect x="0.4196%" y="405" width="93.4266%" height="15" fill="rgb(236,23,11)"/><text x="0.6696%" y="415.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 2.10%)</title><rect x="91.7483%" y="389" width="2.0979%" height="15" fill="rgb(205,117,38)"/><text x="91.9983%" y="399.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 2.10%)</title><rect x="91.7483%" y="373" width="2.0979%" height="15" fill="rgb(237,72,25)"/><text x="91.9983%" y="383.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 2.10%)</title><rect x="91.7483%" y="357" width="2.0979%" height="15" fill="rgb(244,70,9)"/><text x="91.9983%" y="367.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (15 samples, 2.10%)</title><rect x="91.7483%" y="341" width="2.0979%" height="15" fill="rgb(217,125,39)"/><text x="91.9983%" y="351.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 2.10%)</title><rect x="91.7483%" y="325" width="2.0979%" height="15" fill="rgb(235,36,10)"/><text x="91.9983%" y="335.50">&lt;..</text></g><g><title>core::option::Option&lt;T&gt;::map (15 samples, 2.10%)</title><rect x="91.7483%" y="309" width="2.0979%" height="15" fill="rgb(251,123,47)"/><text x="91.9983%" y="319.50">c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (15 samples, 2.10%)</title><rect x="91.7483%" y="293" width="2.0979%" height="15" fill="rgb(221,13,13)"/><text x="91.9983%" y="303.50">c..</text></g><g><title>rust_fractal_video::main::{{closure}} (15 samples, 2.10%)</title><rect x="91.7483%" y="277" width="2.0979%" height="15" fill="rgb(238,131,9)"/><text x="91.9983%" y="287.50">r..</text></g><g><title>image::imageops::sample::resize (15 samples, 2.10%)</title><rect x="91.7483%" y="261" width="2.0979%" height="15" fill="rgb(211,50,8)"/><text x="91.9983%" y="271.50">i..</text></g><g><title>image::imageops::sample::vertical_sample (5 samples, 0.70%)</title><rect x="93.1469%" y="245" width="0.6993%" height="15" fill="rgb(245,182,24)"/><text x="93.3969%" y="255.50"></text></g><g><title>image::math::utils::clamp (2 samples, 0.28%)</title><rect x="93.5664%" y="229" width="0.2797%" height="15" fill="rgb(242,14,37)"/><text x="93.8164%" y="239.50"></text></g><g><title>image::dynimage::open (2 samples, 0.28%)</title><rect x="93.8462%" y="437" width="0.2797%" height="15" fill="rgb(246,228,12)"/><text x="94.0962%" y="447.50"></text></g><g><title>image::io::free_functions::open_impl (2 samples, 0.28%)</title><rect x="93.8462%" y="421" width="0.2797%" height="15" fill="rgb(213,55,15)"/><text x="94.0962%" y="431.50"></text></g><g><title>image::io::free_functions::load (2 samples, 0.28%)</title><rect x="93.8462%" y="405" width="0.2797%" height="15" fill="rgb(209,9,3)"/><text x="94.0962%" y="415.50"></text></g><g><title>image::dynimage::DynamicImage::from_decoder (2 samples, 0.28%)</title><rect x="93.8462%" y="389" width="0.2797%" height="15" fill="rgb(230,59,30)"/><text x="94.0962%" y="399.50"></text></g><g><title>image::dynimage::decoder_to_image (2 samples, 0.28%)</title><rect x="93.8462%" y="373" width="0.2797%" height="15" fill="rgb(209,121,21)"/><text x="94.0962%" y="383.50"></text></g><g><title>image::image::decoder_to_vec (2 samples, 0.28%)</title><rect x="93.8462%" y="357" width="0.2797%" height="15" fill="rgb(220,109,13)"/><text x="94.0962%" y="367.50"></text></g><g><title>&lt;image::png::PngDecoder&lt;R&gt; as image::image::ImageDecoder&gt;::read_image (2 samples, 0.28%)</title><rect x="93.8462%" y="341" width="0.2797%" height="15" fill="rgb(232,18,1)"/><text x="94.0962%" y="351.50"></text></g><g><title>png::decoder::Reader&lt;R&gt;::next_frame (2 samples, 0.28%)</title><rect x="93.8462%" y="325" width="0.2797%" height="15" fill="rgb(215,41,42)"/><text x="94.0962%" y="335.50"></text></g><g><title>png::decoder::Reader&lt;R&gt;::next_row (2 samples, 0.28%)</title><rect x="93.8462%" y="309" width="0.2797%" height="15" fill="rgb(224,123,36)"/><text x="94.0962%" y="319.50"></text></g><g><title>png::decoder::Reader&lt;R&gt;::next_interlaced_row (2 samples, 0.28%)</title><rect x="93.8462%" y="293" width="0.2797%" height="15" fill="rgb(240,125,3)"/><text x="94.0962%" y="303.50"></text></g><g><title>png::decoder::Reader&lt;R&gt;::next_interlaced_row_impl (2 samples, 0.28%)</title><rect x="93.8462%" y="277" width="0.2797%" height="15" fill="rgb(205,98,50)"/><text x="94.0962%" y="287.50"></text></g><g><title>png::decoder::Reader&lt;R&gt;::next_raw_interlaced_row (2 samples, 0.28%)</title><rect x="93.8462%" y="261" width="0.2797%" height="15" fill="rgb(205,185,37)"/><text x="94.0962%" y="271.50"></text></g><g><title>png::filter::unfilter (2 samples, 0.28%)</title><rect x="93.8462%" y="245" width="0.2797%" height="15" fill="rgb(238,207,15)"/><text x="94.0962%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.14%)</title><rect x="93.9860%" y="229" width="0.1399%" height="15" fill="rgb(213,199,42)"/><text x="94.2360%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.14%)</title><rect x="93.9860%" y="213" width="0.1399%" height="15" fill="rgb(235,201,11)"/><text x="94.2360%" y="223.50"></text></g><g><title>image::imageops::overlay (1 samples, 0.14%)</title><rect x="94.1259%" y="437" width="0.1399%" height="15" fill="rgb(207,46,11)"/><text x="94.3759%" y="447.50"></text></g><g><title>&lt;image::buffer_::ImageBuffer&lt;P,Container&gt; as image::image::GenericImage&gt;::put_pixel (1 samples, 0.14%)</title><rect x="94.1259%" y="421" width="0.1399%" height="15" fill="rgb(241,35,35)"/><text x="94.3759%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="94.6853%" y="405" width="0.1399%" height="15" fill="rgb(243,32,47)"/><text x="94.9353%" y="415.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="94.6853%" y="389" width="0.1399%" height="15" fill="rgb(247,202,23)"/><text x="94.9353%" y="399.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&lt;&amp;f32&gt;&gt;::mul (1 samples, 0.14%)</title><rect x="94.8252%" y="405" width="0.1399%" height="15" fill="rgb(219,102,11)"/><text x="95.0752%" y="415.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (1 samples, 0.14%)</title><rect x="94.8252%" y="389" width="0.1399%" height="15" fill="rgb(243,110,44)"/><text x="95.0752%" y="399.50"></text></g><g><title>&lt;f32 as num_traits::cast::NumCast&gt;::from (2 samples, 0.28%)</title><rect x="94.9650%" y="405" width="0.2797%" height="15" fill="rgb(222,74,54)"/><text x="95.2150%" y="415.50"></text></g><g><title>&lt;u8 as num_traits::cast::ToPrimitive&gt;::to_f32 (2 samples, 0.28%)</title><rect x="94.9650%" y="389" width="0.2797%" height="15" fill="rgb(216,99,12)"/><text x="95.2150%" y="399.50"></text></g><g><title>&lt;image::buffer_::ImageBuffer&lt;P,Container&gt; as image::image::GenericImageView&gt;::get_pixel (14 samples, 1.96%)</title><rect x="95.2448%" y="405" width="1.9580%" height="15" fill="rgb(226,22,26)"/><text x="95.4948%" y="415.50">&lt;..</text></g><g><title>&lt;image::color::Rgb&lt;T&gt; as image::traits::Pixel&gt;::from_channels (1 samples, 0.14%)</title><rect x="97.2028%" y="405" width="0.1399%" height="15" fill="rgb(217,163,10)"/><text x="97.4528%" y="415.50"></text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::put_pixel (2 samples, 0.28%)</title><rect x="97.3427%" y="405" width="0.2797%" height="15" fill="rgb(213,25,53)"/><text x="97.5927%" y="415.50"></text></g><g><title>image::imageops::sample::horizontal_sample (27 samples, 3.78%)</title><rect x="94.2657%" y="421" width="3.7762%" height="15" fill="rgb(252,105,26)"/><text x="94.5157%" y="431.50">imag..</text></g><g><title>image::math::utils::clamp (3 samples, 0.42%)</title><rect x="97.6224%" y="405" width="0.4196%" height="15" fill="rgb(220,39,43)"/><text x="97.8724%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="98.6014%" y="405" width="0.1399%" height="15" fill="rgb(229,68,48)"/><text x="98.8514%" y="415.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="98.6014%" y="389" width="0.1399%" height="15" fill="rgb(252,8,32)"/><text x="98.8514%" y="399.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&lt;&amp;f32&gt;&gt;::mul (1 samples, 0.14%)</title><rect x="98.7413%" y="405" width="0.1399%" height="15" fill="rgb(223,20,43)"/><text x="98.9913%" y="415.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (1 samples, 0.14%)</title><rect x="98.7413%" y="389" width="0.1399%" height="15" fill="rgb(229,81,49)"/><text x="98.9913%" y="399.50"></text></g><g><title>&lt;f32 as num_traits::cast::NumCast&gt;::from (2 samples, 0.28%)</title><rect x="98.8811%" y="405" width="0.2797%" height="15" fill="rgb(236,28,36)"/><text x="99.1311%" y="415.50"></text></g><g><title>&lt;u8 as num_traits::cast::ToPrimitive&gt;::to_f32 (2 samples, 0.28%)</title><rect x="98.8811%" y="389" width="0.2797%" height="15" fill="rgb(249,185,26)"/><text x="99.1311%" y="399.50"></text></g><g><title>&lt;image::buffer_::ImageBuffer&lt;P,Container&gt; as image::image::GenericImageView&gt;::get_pixel (1 samples, 0.14%)</title><rect x="99.1608%" y="405" width="0.1399%" height="15" fill="rgb(249,174,33)"/><text x="99.4108%" y="415.50"></text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::get_pixel (1 samples, 0.14%)</title><rect x="99.1608%" y="389" width="0.1399%" height="15" fill="rgb(233,201,37)"/><text x="99.4108%" y="399.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.14%)</title><rect x="99.1608%" y="373" width="0.1399%" height="15" fill="rgb(221,78,26)"/><text x="99.4108%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.14%)</title><rect x="99.1608%" y="357" width="0.1399%" height="15" fill="rgb(250,127,30)"/><text x="99.4108%" y="367.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.14%)</title><rect x="99.4406%" y="373" width="0.1399%" height="15" fill="rgb(230,49,44)"/><text x="99.6906%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.14%)</title><rect x="99.4406%" y="357" width="0.1399%" height="15" fill="rgb(229,67,23)"/><text x="99.6906%" y="367.50"></text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::put_pixel (3 samples, 0.42%)</title><rect x="99.3007%" y="405" width="0.4196%" height="15" fill="rgb(249,83,47)"/><text x="99.5507%" y="415.50"></text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::get_pixel_mut (2 samples, 0.28%)</title><rect x="99.4406%" y="389" width="0.2797%" height="15" fill="rgb(215,43,3)"/><text x="99.6906%" y="399.50"></text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::pixel_indices (1 samples, 0.14%)</title><rect x="99.5804%" y="373" width="0.1399%" height="15" fill="rgb(238,154,13)"/><text x="99.8304%" y="383.50"></text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::pixel_indices_unchecked (1 samples, 0.14%)</title><rect x="99.5804%" y="357" width="0.1399%" height="15" fill="rgb(219,56,2)"/><text x="99.8304%" y="367.50"></text></g><g><title>all (715 samples, 100%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="671.50"></text></g><g><title>rust-fractal-vi (715 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(235,30,7)"/><text x="0.2500%" y="655.50">rust-fractal-vi</text></g><g><title>_start (712 samples, 99.58%)</title><rect x="0.4196%" y="629" width="99.5804%" height="15" fill="rgb(250,79,13)"/><text x="0.6696%" y="639.50">_start</text></g><g><title>__libc_start_main (712 samples, 99.58%)</title><rect x="0.4196%" y="613" width="99.5804%" height="15" fill="rgb(211,146,34)"/><text x="0.6696%" y="623.50">__libc_start_main</text></g><g><title>main (712 samples, 99.58%)</title><rect x="0.4196%" y="597" width="99.5804%" height="15" fill="rgb(228,22,38)"/><text x="0.6696%" y="607.50">main</text></g><g><title>std::rt::lang_start_internal (712 samples, 99.58%)</title><rect x="0.4196%" y="581" width="99.5804%" height="15" fill="rgb(235,168,5)"/><text x="0.6696%" y="591.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (712 samples, 99.58%)</title><rect x="0.4196%" y="565" width="99.5804%" height="15" fill="rgb(221,155,16)"/><text x="0.6696%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (712 samples, 99.58%)</title><rect x="0.4196%" y="549" width="99.5804%" height="15" fill="rgb(215,215,53)"/><text x="0.6696%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (712 samples, 99.58%)</title><rect x="0.4196%" y="533" width="99.5804%" height="15" fill="rgb(223,4,10)"/><text x="0.6696%" y="543.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (712 samples, 99.58%)</title><rect x="0.4196%" y="517" width="99.5804%" height="15" fill="rgb(234,103,6)"/><text x="0.6696%" y="527.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (712 samples, 99.58%)</title><rect x="0.4196%" y="501" width="99.5804%" height="15" fill="rgb(227,97,0)"/><text x="0.6696%" y="511.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (712 samples, 99.58%)</title><rect x="0.4196%" y="485" width="99.5804%" height="15" fill="rgb(234,150,53)"/><text x="0.6696%" y="495.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (712 samples, 99.58%)</title><rect x="0.4196%" y="469" width="99.5804%" height="15" fill="rgb(228,201,54)"/><text x="0.6696%" y="479.50">core::ops::function::FnOnce::call_once</text></g><g><title>rust_fractal_video::main (712 samples, 99.58%)</title><rect x="0.4196%" y="453" width="99.5804%" height="15" fill="rgb(222,22,37)"/><text x="0.6696%" y="463.50">rust_fractal_video::main</text></g><g><title>image::imageops::sample::resize (41 samples, 5.73%)</title><rect x="94.2657%" y="437" width="5.7343%" height="15" fill="rgb(237,53,32)"/><text x="94.5157%" y="447.50">image::..</text></g><g><title>image::imageops::sample::vertical_sample (14 samples, 1.96%)</title><rect x="98.0420%" y="421" width="1.9580%" height="15" fill="rgb(233,25,53)"/><text x="98.2920%" y="431.50">i..</text></g><g><title>image::math::utils::clamp (2 samples, 0.28%)</title><rect x="99.7203%" y="405" width="0.2797%" height="15" fill="rgb(210,40,34)"/><text x="99.9703%" y="415.50"></text></g></svg></svg>